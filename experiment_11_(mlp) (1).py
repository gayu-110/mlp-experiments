# -*- coding: utf-8 -*-
"""Experiment-11 (MLP)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y9MMljq1kgN1B4i07XfIwYPXcPjTfnnC
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.datasets import load_breast_cancer

# Load the breast cancer dataset
data = load_breast_cancer()

# Preprocess your dataset
X = data.data
y = data.target

# Encode the target variable
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Scale the input features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize DecisionTreeClassifier
decision_tree = DecisionTreeClassifier()

# Fit the model on the training data
decision_tree.fit(X_train_scaled, y_train)

# Predict the target variable for the test data
decision_tree_pred = decision_tree.predict(X_test_scaled)

# Calculate performance measures
decision_tree_accuracy = accuracy_score(y_test, decision_tree_pred)
decision_tree_precision = precision_score(y_test, decision_tree_pred, average='weighted')
decision_tree_recall = recall_score(y_test, decision_tree_pred, average='weighted')
decision_tree_f1 = f1_score(y_test, decision_tree_pred, average='weighted')
decision_tree_roc_auc = roc_auc_score(y_test, decision_tree.predict_proba(X_test_scaled)[:, 1])

# Print the performance measures
print("Accuracy (Decision Tree):", decision_tree_accuracy)
print("Precision (Decision Tree):", decision_tree_precision)
print("Recall (Decision Tree):", decision_tree_recall)
print("F1 Score (Decision Tree):", decision_tree_f1)
print("ROC-AUC Score (Decision Tree):", decision_tree_roc_auc)

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.datasets import load_breast_cancer

# Load the breast cancer dataset
data = load_breast_cancer()

# Preprocess your dataset
X = data.data
y = data.target

# Encode the target variable
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Scale the input features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize LogisticRegression
logistic_regression = LogisticRegression(max_iter=1000)

# Fit the model on the training data
logistic_regression.fit(X_train_scaled, y_train)

# Predict the target variable for the test data
logistic_regression_pred = logistic_regression.predict(X_test_scaled)

# Calculate performance measures
logistic_regression_accuracy = accuracy_score(y_test, logistic_regression_pred)
logistic_regression_precision = precision_score(y_test, logistic_regression_pred, average='weighted')
logistic_regression_recall = recall_score(y_test, logistic_regression_pred, average='weighted')
logistic_regression_f1 = f1_score(y_test, logistic_regression_pred, average='weighted')
logistic_regression_roc_auc = roc_auc_score(y_test, logistic_regression.predict_proba(X_test_scaled)[:, 1])

# Print the performance measures
print("Accuracy (Logistic Regression):", logistic_regression_accuracy)
print("Precision (Logistic Regression):", logistic_regression_precision)
print("Recall (Logistic Regression):", logistic_regression_recall)
print("F1 Score (Logistic Regression):", logistic_regression_f1)
print("ROC-AUC Score (Logistic Regression):", logistic_regression_roc_auc)

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.datasets import load_breast_cancer

# Load the breast cancer dataset
data = load_breast_cancer()

# Preprocess your dataset
X = data.data
y = data.target

# Encode the target variable
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Scale the input features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Initialize RandomForestClassifier
random_forest = RandomForestClassifier()

# Fit the model on the training data
random_forest.fit(X_train_scaled, y_train)

# Predict the target variable for the test data
random_forest_pred = random_forest.predict(X_test_scaled)

# Calculate performance measures
random_forest_accuracy = accuracy_score(y_test, random_forest_pred)
random_forest_precision = precision_score(y_test, random_forest_pred, average='weighted')
random_forest_recall = recall_score(y_test, random_forest_pred, average='weighted')
random_forest_f1 = f1_score(y_test, random_forest_pred, average='weighted')
random_forest_roc_auc = roc_auc_score(y_test, random_forest.predict_proba(X_test_scaled)[:, 1])

# Print the performance measures
print("Accuracy (Random Forest):", random_forest_accuracy)
print("Precision (Random Forest):", random_forest_precision)
print("Recall (Random Forest):", random_forest_recall)
print("F1 Score (Random Forest):", random_forest_f1)
print("ROC-AUC Score (Random Forest):", random_forest_roc_auc)